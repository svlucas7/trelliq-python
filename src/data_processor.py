"""
Processador de dados do Trello - Replica a l√≥gica completa do sistema TypeScript.
"""

import pandas as pd
from datetime import datetime, date
from typing import Dict, List, Any, Optional, Tuple
import logging
from dataclasses import dataclass

from .config import (
    GRUPOS_MARKETING, CONTENT_CREATORS, LIST_STATUS_MAP, STATUS_COLORS,
    get_grupo_por_responsavel, get_etapa_atual, is_finalizada_para_flavia, 
    is_feita, is_em_revisao, GrupoMarketing
)

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class TaskReport:
    """Relat√≥rio de uma tarefa individual."""
    task_id: str  # ID √∫nico da tarefa
    collaborator_name: str
    task_name: str
    list_name: str
    due_date: str
    created_at: str
    completed_at: Optional[str]
    status: str
    days_late: int
    observations: str
    grupo: Optional[str]
    etapa_atual: Optional[str]
    finalizada_para_flavia: bool
    feita: bool
    em_revisao: bool

@dataclass
class CollaboratorReport:
    """Relat√≥rio de um colaborador."""
    collaborator_name: str
    total_tasks: int
    completed_tasks: int
    in_progress_tasks: int
    pending_tasks: int
    late_tasks: int
    blocked_tasks: int
    completion_rate: float
    average_days_late: int
    tasks: List[TaskReport]

@dataclass
class GroupReportSummary:
    """Resumo de relat√≥rio por grupo."""
    grupo: str
    responsaveis: List[str]
    total_tasks: int
    completed_tasks: int
    in_progress_tasks: int
    late_tasks: int
    blocked_tasks: int
    on_time_deliveries: int
    late_deliveries: int

@dataclass
class ReportSummary:
    """Resumo geral do relat√≥rio."""
    total_tasks: int
    completed_tasks: int
    in_progress_tasks: int
    late_tasks: int
    overdue_tasks: int
    blocked_tasks: int
    total_collaborators: int
    group_summaries: List[GroupReportSummary]

class TrelloDataProcessor:
    """
    Processador de dados do Trello que replica a l√≥gica completa do sistema TypeScript.
    """
    
    def __init__(self):
        """Inicializa o processador."""
        self.logger = logging.getLogger(__name__)
    
    def validate_trello_data(self, data: Dict[str, Any]) -> Tuple[bool, List[str]]:
        """
        Valida estrutura do JSON do Trello.
        
        Args:
            data: Dados do JSON do Trello
            
        Returns:
            Tuple com (is_valid, error_messages)
        """
        errors = []
        
        if not isinstance(data, dict):
            errors.append("Dados devem ser um objeto JSON v√°lido")
            return False, errors
            
        required_fields = ['cards', 'lists', 'members', 'name']
        for field in required_fields:
            if field not in data:
                errors.append(f"Campo obrigat√≥rio '{field}' n√£o encontrado")
            elif field != 'name' and not isinstance(data[field], list):
                errors.append(f"Campo '{field}' deve ser uma lista")
                
        if not isinstance(data.get('name'), str):
            errors.append("Campo 'name' deve ser uma string")
            
        return len(errors) == 0, errors
    
    def filter_cards_by_date_range(self, cards: List[Dict], start_date: date, end_date: date, lists: List[Dict] = None) -> List[Dict]:
        """
        Filtra cards por per√≠odo de data com l√≥gica inteligente.
        
        Para tarefas conclu√≠das: verifica due date no per√≠odo
        Para tarefas em andamento: verifica √∫ltima atividade no per√≠odo
        
        Args:
            cards: Lista de cards do Trello
            start_date: Data de in√≠cio
            end_date: Data de fim
            lists: Lista de listas do board (opcional, para identificar listas conclu√≠das)
            
        Returns:
            Lista de cards filtrados
        """
        logger.info(f"=== FILTRO POR DATA INTELIGENTE ===")
        logger.info(f"Per√≠odo: {start_date.strftime('%d/%m/%Y')} at√© {end_date.strftime('%d/%m/%Y')}")
        logger.info(f"Total de cards no board: {len(cards)}")
        
        # Identificar listas de tarefas conclu√≠das
        completed_list_ids = set()
        if lists:
            for lista in lists:
                list_name_upper = lista['name'].upper().strip()
                completed_keywords = ['FEITO', 'FEITOS', 'CONCLU√ç', 'FINALIZADO', 'COMPLETO', 'DONE', 'FINISHED']
                if any(keyword in list_name_upper for keyword in completed_keywords):
                    completed_list_ids.add(lista['id'])
                    logger.info(f"üìã Lista identificada como CONCLU√çDA: {lista['name']}")
        
        filtered_cards = []
        
        for card in cards:
            # Filtrar cards arquivados
            if card.get('closed', False):
                logger.info(f"üì¶ Card ARQUIVADO ignorado: \"{card.get('name', 'N/A')}\"")
                continue
                
            card_name = card.get('name', 'N/A')
            list_id = card.get('idList')
            is_in_completed_list = list_id in completed_list_ids
            
            # Para tarefas em listas de CONCLU√çDAS: filtrar por due date
            if is_in_completed_list:
                due_date_str = card.get('due')
                if due_date_str:
                    try:
                        if due_date_str.endswith('Z'):
                            due_date = datetime.fromisoformat(due_date_str.replace('Z', '+00:00')).date()
                        else:
                            due_date = datetime.fromisoformat(due_date_str).date()
                        
                        # Se o due date est√° no per√≠odo, incluir o card
                        if start_date <= due_date <= end_date:
                            filtered_cards.append(card)
                            logger.info(f"‚úÖ Card CONCLU√çDO \"{card_name}\": inclu√≠do por due date {due_date.strftime('%d/%m/%Y')} no per√≠odo")
                            continue
                        else:
                            logger.info(f"‚ùå Card CONCLU√çDO \"{card_name}\": due date {due_date.strftime('%d/%m/%Y')} fora do per√≠odo")
                            continue
                            
                    except (ValueError, TypeError) as e:
                        logger.error(f"Erro ao processar due date do card \"{card_name}\": {e}")
                        
                # Se n√£o tem due date, n√£o incluir cards conclu√≠dos sem data de vencimento
                logger.info(f"‚ùå Card CONCLU√çDO \"{card_name}\": sem due date, n√£o inclu√≠do no per√≠odo")
                continue
            
            # Para tarefas EM ANDAMENTO: filtrar por √∫ltima atividade
            last_activity_str = card.get('dateLastActivity')
            if not last_activity_str:
                logger.warning(f"‚ö†Ô∏è Card sem dateLastActivity: \"{card_name}\"")
                continue
                
            try:
                # Parse da data (formato ISO do Trello)
                if last_activity_str.endswith('Z'):
                    last_activity = datetime.fromisoformat(last_activity_str.replace('Z', '+00:00')).date()
                else:
                    last_activity = datetime.fromisoformat(last_activity_str).date()
                    
                # Verificar se est√° no per√≠odo
                is_in_range = start_date <= last_activity <= end_date
                
                if is_in_range:
                    filtered_cards.append(card)
                    logger.info(f"‚úÖ Card EM ANDAMENTO \"{card_name}\": inclu√≠do por √∫ltima atividade {last_activity.strftime('%d/%m/%Y')} no per√≠odo")
                else:
                    logger.info(f"‚ùå Card EM ANDAMENTO \"{card_name}\": √∫ltima atividade {last_activity.strftime('%d/%m/%Y')} fora do per√≠odo")
                    
            except (ValueError, TypeError) as e:
                logger.error(f"Erro ao processar data do card \"{card_name}\": {e}")
                
        logger.info(f"Total de cards no per√≠odo: {len(filtered_cards)}")
        logger.info("======================")
        
        return filtered_cards
    
    def get_task_status(self, card: Dict, lists: List[Dict], members: List[Dict]) -> str:
        """
        Obt√©m o status da tarefa baseado na lista.
        
        Args:
            card: Card do Trello
            lists: Listas do board
            members: Membros do board
            
        Returns:
            Status da tarefa
        """
        # Verificar se o card est√° arquivado
        if card.get('closed', False):
            logger.info(f"üì¶ Card ARQUIVADO: \"{card.get('name')}\" - Status ser√° CONCLU√çDA")
            return 'Conclu√≠da'
            
        # Encontrar a lista do card
        list_obj = next((l for l in lists if l['id'] == card.get('idList')), None)
        if not list_obj:
            logger.warning(f"‚ö†Ô∏è Lista n√£o encontrada para card: {card.get('name')} (ID: {card.get('idList')})")
            return 'Em Andamento'
            
        list_name_upper = list_obj['name'].upper().strip()
        logger.info(f"üîç Analisando status do card \"{card.get('name')}\" na lista \"{list_obj['name']}\"")
        
        # Verifica√ß√£o priorit√°ria para listas de "conclu√≠do"
        completed_keywords = ['FEITO', 'FEITOS', 'CONCLU√ç', 'FINALIZADO', 'COMPLETO', 'DONE', 'FINISHED']
        is_completed = any(keyword in list_name_upper for keyword in completed_keywords)
        
        if is_completed:
            logger.info(f"‚úÖ TAREFA CONCLU√çDA detectada: \"{card.get('name')}\" na lista \"{list_obj['name']}\"")
            return 'Conclu√≠da'
            
        # Considerar 'AGUARDANDO RETORNO DE TERCEIROS' como conclu√≠da
        if ('AGUARDANDO' in list_name_upper and 
            'RETORNO' in list_name_upper and 
            'TERCEIRO' in list_name_upper):
            logger.info(f"‚úÖ AGUARDANDO TERCEIROS considerada CONCLU√çDA: \"{card.get('name')}\"")
            return 'Conclu√≠da'
            
        # Verificar mapeamento direto
        direct_status = LIST_STATUS_MAP.get(list_name_upper)
        if direct_status:
            logger.info(f"üìã Status mapeado diretamente: \"{card.get('name')}\" -> {direct_status}")
            
            # Verificar se est√° atrasada (exceto se conclu√≠da)
            if direct_status != 'Conclu√≠da' and card.get('due'):
                if self._is_overdue(card):
                    logger.info(f"‚ö†Ô∏è Tarefa ATRASADA detectada: \"{card.get('name')}\" (prazo: {card.get('due')})")
                    return 'Atrasada'
                    
            return direct_status
            
        # Verifica√ß√£o por palavras-chave para outros status
        if any(keyword in list_name_upper for keyword in ['BLOQUEADA', 'PARADA', 'AGUARDANDO']):
            logger.info(f"üö´ Status BLOQUEADA detectado: \"{card.get('name')}\"")
            return 'Bloqueada'
            
        if any(keyword in list_name_upper for keyword in ['PLANEJ', 'PLAN']):
            logger.info(f"üìù Status PLANEJAMENTO detectado: \"{card.get('name')}\"")
            return 'Planejamento'
            
        if 'RECORREN' in list_name_upper:
            logger.info(f"üîÑ Status RECORRENTE detectado: \"{card.get('name')}\"")
            return 'Recorrente'
            
        # Verificar se est√° atrasada (padr√£o para tarefas em andamento)
        if card.get('due') and self._is_overdue(card):
            logger.info(f"‚ö†Ô∏è Tarefa ATRASADA detectada: \"{card.get('name')}\" (prazo: {card.get('due')})")
            return 'Atrasada'
            
        logger.info(f"üìã Status padr√£o EM ANDAMENTO: \"{card.get('name')}\" na lista \"{list_obj['name']}\"")
        return 'Em Andamento'
    
    def get_task_status_for_collaborator(self, card: Dict, collaborator_username: str, lists: List[Dict]) -> str:
        """
        Obt√©m status espec√≠fico para criadores de conte√∫do.
        
        Args:
            card: Card do Trello
            collaborator_username: Username do colaborador
            lists: Listas do board
            
        Returns:
            Status espec√≠fico para o colaborador
        """
        # Verificar se o card est√° arquivado
        if card.get('closed', False):
            logger.info(f"üì¶ Card ARQUIVADO: \"{card.get('name')}\" - Status ser√° CONCLU√çDA para {collaborator_username}")
            return 'Conclu√≠da'
            
        # Verificar se √© um criador de conte√∫do
        if collaborator_username not in CONTENT_CREATORS:
            return self.get_task_status(card, lists, [])  # Usar l√≥gica padr√£o
            
        # Encontrar a lista do card
        list_obj = next((l for l in lists if l['id'] == card.get('idList')), None)
        if not list_obj:
            logger.warning(f"‚ö†Ô∏è Lista n√£o encontrada para card: {card.get('name')} (ID: {card.get('idList')})")
            return 'Em Andamento'
            
        list_name_upper = list_obj['name'].upper().strip()
        logger.info(f"üé® CRIADOR DE CONTE√öDO - Analisando status do card \"{card.get('name')}\" na lista \"{list_obj['name']}\" para {collaborator_username}")
        
        # Para criadores de conte√∫do: qualquer coisa que N√ÉO seja "EM PROCESSO DE CONTE√öDO" √© considerada conclu√≠da
        if list_name_upper == 'EM PROCESSO DE CONTE√öDO':
            logger.info(f"üìù CRIADOR DE CONTE√öDO - \"{collaborator_username}\": tarefa \"{card.get('name')}\" ainda EM ANDAMENTO (na lista de conte√∫do)")
            
            # Verificar se est√° atrasada
            if card.get('due') and self._is_overdue(card):
                logger.info(f"‚ö†Ô∏è CRIADOR DE CONTE√öDO - Tarefa ATRASADA: \"{card.get('name')}\" (prazo: {card.get('due')})")
                return 'Atrasada'
                
            return 'Em Andamento'
        else:
            # Se n√£o est√° mais em "EM PROCESSO DE CONTE√öDO", est√° conclu√≠da para o criador de conte√∫do
            logger.info(f"‚úÖ CRIADOR DE CONTE√öDO - \"{collaborator_username}\": tarefa \"{card.get('name')}\" CONCLU√çDA (saiu da lista de conte√∫do)")
            return 'Conclu√≠da'
    
    def calculate_days_late(self, card: Dict) -> int:
        """
        Calcula dias de atraso de uma tarefa.
        
        Args:
            card: Card do Trello
            
        Returns:
            N√∫mero de dias de atraso
        """
        if not card.get('due'):
            return 0
            
        # Cards arquivados n√£o t√™m atraso
        if card.get('closed', False):
            logger.info(f"üì¶ Card ARQUIVADO: \"{card.get('name')}\" - Sem atraso (arquivado)")
            return 0
            
        try:
            due_date_str = card['due']
            if due_date_str.endswith('Z'):
                due_date = datetime.fromisoformat(due_date_str.replace('Z', '+00:00')).date()
            else:
                due_date = datetime.fromisoformat(due_date_str).date()
                
            today = date.today()
            
            if today <= due_date:
                return 0
                
            days_late = (today - due_date).days
            logger.info(f"üìÖ Tarefa \"{card.get('name')}\": atraso de {days_late} dias (prazo: {due_date.strftime('%d/%m/%Y')})")
            
            return days_late
            
        except (ValueError, TypeError) as e:
            logger.error(f"Erro ao calcular atraso do card \"{card.get('name')}\": {e}")
            return 0
    
    def calculate_days_late_for_collaborator(self, card: Dict, collaborator_username: str, lists: List[Dict]) -> int:
        """
        Calcula dias de atraso espec√≠fico para colaborador.
        
        Args:
            card: Card do Trello
            collaborator_username: Username do colaborador
            lists: Listas do board
            
        Returns:
            N√∫mero de dias de atraso espec√≠fico para o colaborador
        """
        if not card.get('due'):
            return 0
            
        # Cards arquivados n√£o t√™m atraso
        if card.get('closed', False):
            logger.info(f"üì¶ Card ARQUIVADO: \"{card.get('name')}\" - Sem atraso (arquivado)")
            return 0
            
        # Para criadores de conte√∫do, s√≥ calcular atraso se ainda estiver na lista "EM PROCESSO DE CONTE√öDO"
        if collaborator_username in CONTENT_CREATORS:
            list_obj = next((l for l in lists if l['id'] == card.get('idList')), None)
            list_name_upper = list_obj['name'].upper().strip() if list_obj else ''
            
            # Se n√£o est√° mais em "EM PROCESSO DE CONTE√öDO", n√£o h√° atraso (tarefa foi conclu√≠da)
            if list_name_upper != 'EM PROCESSO DE CONTE√öDO':
                logger.info(f"‚úÖ CRIADOR DE CONTE√öDO - \"{collaborator_username}\": sem atraso (tarefa saiu da lista de conte√∫do)")
                return 0
                
            # Se ainda est√° em "EM PROCESSO DE CONTE√öDO", calcular atraso normalmente
            return self.calculate_days_late(card)
            
        # Para outros colaboradores, usar l√≥gica padr√£o
        return self.calculate_days_late(card)
    
    def _is_overdue(self, card: Dict) -> bool:
        """Verifica se um card est√° atrasado."""
        if not card.get('due'):
            return False
            
        try:
            due_date_str = card['due']
            if due_date_str.endswith('Z'):
                due_date = datetime.fromisoformat(due_date_str.replace('Z', '+00:00')).date()
            else:
                due_date = datetime.fromisoformat(due_date_str).date()
                
            return date.today() > due_date
            
        except (ValueError, TypeError):
            return False
    
    def get_collaborator_name(self, card: Dict, members: List[Dict]) -> str:
        """
        Obt√©m nome do colaborador de um card.
        
        Args:
            card: Card do Trello
            members: Lista de membros
            
        Returns:
            Nome do colaborador ou 'N√£o atribu√≠do'
        """
        id_members = card.get('idMembers', [])
        if not id_members:
            return 'N√£o atribu√≠do'
            
        member = next((m for m in members if m['id'] == id_members[0]), None)
        return member['fullName'] if member else 'N√£o atribu√≠do'
    
    def generate_task_reports(self, data: Dict[str, Any], start_date: date, end_date: date) -> List[TaskReport]:
        """
        Gera relat√≥rios de tarefas com l√≥gica corrigida para evitar duplica√ß√µes.
        
        Args:
            data: Dados do Trello
            start_date: Data de in√≠cio
            end_date: Data de fim
            
        Returns:
            Lista de relat√≥rios de tarefas
        """
        cards = data.get('cards', [])
        lists = data.get('lists', [])
        members = data.get('members', [])
        
        filtered_cards = self.filter_cards_by_date_range(cards, start_date, end_date, lists)
        reports = []
        
        logger.info('=== GERA√á√ÉO DE RELAT√ìRIOS DE TAREFAS ===')
        logger.info(f'Total de cards filtrados: {len(filtered_cards)}')
        
        for card in filtered_cards:
            list_obj = next((l for l in lists if l['id'] == card.get('idList')), None)
            list_name = list_obj['name'] if list_obj else 'Lista n√£o encontrada'
            
            id_members = card.get('idMembers', [])
            
            if not id_members:
                # Card sem colaboradores atribu√≠dos
                task_status = self.get_task_status(card, lists, members)
                due_date_str = self._format_due_date(card.get('due'))
                
                reports.append(TaskReport(
                    task_id=card.get('id', ''),
                    collaborator_name='N√£o atribu√≠do',
                    task_name=card.get('name', ''),
                    list_name=list_name,
                    due_date=due_date_str,
                    created_at=card.get('dateLastActivity', ''),
                    completed_at=card.get('dateLastActivity', '') if task_status == 'Conclu√≠da' else None,
                    status=task_status,
                    days_late=self.calculate_days_late(card),
                    observations=card.get('desc', '') or list_name,
                    grupo=None,
                    etapa_atual=get_etapa_atual(list_name),
                    finalizada_para_flavia=False,
                    feita=False,
                    em_revisao=is_em_revisao(list_name)
                ))
                
                logger.info(f"‚úÖ Adicionado card sem atribui√ß√£o: \"{card.get('name')}\"")
            else:
                # Card com colaboradores - L√ìGICA CORRIGIDA
                card_members = [m for m in members if m['id'] in id_members]
                
                # Mapear membros por grupo para evitar duplica√ß√µes
                grupos_encontrados = set()
                membros_sem_grupo = []
                
                # Primeiro, identificar todos os grupos √∫nicos dos membros
                for member in card_members:
                    grupo = get_grupo_por_responsavel(member['username'])
                    if grupo:
                        grupos_encontrados.add(grupo.name)
                    else:
                        membros_sem_grupo.append(member)
                
                # Criar UMA entrada por grupo (n√£o por membro do grupo)
                for nome_grupo in grupos_encontrados:
                    grupo = next((g for g in GRUPOS_MARKETING if g.name == nome_grupo), None)
                    if not grupo:
                        continue
                        
                    # Pegar todos os membros deste grupo que est√£o no card
                    membros_do_grupo = [m for m in card_members 
                                      if get_grupo_por_responsavel(m['username']) and 
                                         get_grupo_por_responsavel(m['username']).name == nome_grupo]
                    
                    collaborator_names = ', '.join(m['fullName'] for m in membros_do_grupo)
                    primeiro_membro = membros_do_grupo[0] if membros_do_grupo else None
                    
                    if primeiro_membro:
                        task_status = self.get_task_status_for_collaborator(card, primeiro_membro['username'], lists)
                        days_late = self.calculate_days_late_for_collaborator(card, primeiro_membro['username'], lists)
                        due_date_str = self._format_due_date(card.get('due'))
                        
                        reports.append(TaskReport(
                            task_id=card.get('id', ''),
                            collaborator_name=collaborator_names,
                            task_name=card.get('name', ''),
                            list_name=list_name,
                            due_date=due_date_str,
                            created_at=card.get('dateLastActivity', ''),
                            completed_at=card.get('dateLastActivity', '') if task_status == 'Conclu√≠da' else None,
                            status=task_status,
                            days_late=days_late,
                            observations=card.get('desc', '') or list_name,
                            grupo=grupo.name,
                            etapa_atual=get_etapa_atual(list_name),
                            finalizada_para_flavia=is_finalizada_para_flavia(list_name, grupo),
                            feita=is_feita(list_name, grupo),
                            em_revisao=is_em_revisao(list_name)
                        ))
                        
                        logger.info(f"‚úÖ Adicionado card para {grupo.name}: \"{card.get('name')}\" - Colaboradores: {collaborator_names}")
                
                # Criar entradas individuais para membros sem grupo
                for member in membros_sem_grupo:
                    task_status = self.get_task_status_for_collaborator(card, member['username'], lists)
                    days_late = self.calculate_days_late_for_collaborator(card, member['username'], lists)
                    due_date_str = self._format_due_date(card.get('due'))
                    
                    reports.append(TaskReport(
                        task_id=card.get('id', ''),
                        collaborator_name=member['fullName'],
                        task_name=card.get('name', ''),
                        list_name=list_name,
                        due_date=due_date_str,
                        created_at=card.get('dateLastActivity', ''),
                        completed_at=card.get('dateLastActivity', '') if task_status == 'Conclu√≠da' else None,
                        status=task_status,
                        days_late=days_late,
                        observations=card.get('desc', '') or list_name,
                        grupo=None,
                        etapa_atual=get_etapa_atual(list_name),
                        finalizada_para_flavia=False,
                        feita=False,
                        em_revisao=is_em_revisao(list_name)
                    ))
                    
                    logger.info(f"‚úÖ Adicionado card para membro sem grupo: \"{card.get('name')}\" - Colaborador: {member['fullName']}")
        
        logger.info(f"=== TOTAL DE REPORTS GERADOS: {len(reports)} ===")
        
        # Debug: mostrar breakdown de reports por grupo
        reports_por_grupo = {}
        for report in reports:
            grupo = report.grupo or 'Sem Grupo'
            reports_por_grupo[grupo] = reports_por_grupo.get(grupo, 0) + 1
            
        logger.info('üìä Breakdown de reports por grupo:')
        for grupo, count in reports_por_grupo.items():
            logger.info(f"  {grupo}: {count} reports")
            
        return reports
    
    def generate_report_summary(self, task_reports: List[TaskReport]) -> ReportSummary:
        """
        Gera resumo do relat√≥rio incluindo 4 grupos.
        
        Args:
            task_reports: Lista de relat√≥rios de tarefas
            
        Returns:
            Resumo do relat√≥rio
        """
        logger.info('=== GERA√á√ÉO DE RESUMO DO RELAT√ìRIO ===')
        logger.info(f'Total de task reports para resumo: {len(task_reports)}')
        
        # Deduplicate tasks by task_id to avoid counting the same task multiple times
        unique_tasks_map = {}
        for task in task_reports:
            if task.task_id not in unique_tasks_map:
                unique_tasks_map[task.task_id] = task
        
        unique_tasks = list(unique_tasks_map.values())
        logger.info(f'Total de tarefas √∫nicas para resumo: {len(unique_tasks)}')
        
        total_tasks = len(unique_tasks)
        completed_tasks = len([t for t in unique_tasks if t.status == 'Conclu√≠da'])
        in_progress_tasks = len([t for t in unique_tasks if t.status == 'Em Andamento'])
        late_tasks = len([t for t in unique_tasks if t.status == 'Atrasada'])
        overdue_tasks = late_tasks  # Atrasadas s√£o as mesmas que em atraso
        blocked_tasks = len([t for t in unique_tasks if t.status == 'Bloqueada'])
        
        # Contar colaboradores √∫nicos (deduplicar colaboradores agrupados)
        unique_collaborators = set()
        for task in unique_tasks:
            if ',' in task.collaborator_name:
                # Se for colaborador agrupado, adicionar cada nome individualmente
                for name in task.collaborator_name.split(','):
                    unique_collaborators.add(name.strip())
            else:
                unique_collaborators.add(task.collaborator_name)
                
        total_collaborators = len(unique_collaborators)
        
        # Resumo por grupo - incluindo todos os 4 grupos
        group_summaries = []
        
        for grupo_obj in GRUPOS_MARKETING:
            grupo = grupo_obj.name
            responsaveis = [r.nome for r in grupo_obj.responsaveis]
            group_tasks = [t for t in task_reports if t.grupo == grupo]
            
            # Deduplicate group tasks by task_id to avoid counting the same task multiple times
            unique_group_tasks_map = {}
            for task in group_tasks:
                if task.task_id not in unique_group_tasks_map:
                    unique_group_tasks_map[task.task_id] = task
            unique_group_tasks = list(unique_group_tasks_map.values())
            
            completed = len([t for t in unique_group_tasks if t.status == 'Conclu√≠da'])
            in_progress = len([t for t in unique_group_tasks if t.status == 'Em Andamento'])
            late = len([t for t in unique_group_tasks if t.status == 'Atrasada'])
            blocked = len([t for t in unique_group_tasks if t.status == 'Bloqueada'])
            
            completed_with_due = [t for t in unique_group_tasks if t.status == 'Conclu√≠da' and t.due_date != 'N√£o definida']
            on_time = len([t for t in completed_with_due if t.days_late == 0])
            late_deliv = len([t for t in completed_with_due if t.days_late > 0])
            
            logger.info(f"üìä {grupo}: {len(unique_group_tasks)} tarefas √∫nicas ({completed} conclu√≠das, {in_progress} em andamento, {late} atrasadas)")
            
            group_summaries.append(GroupReportSummary(
                grupo=grupo,
                responsaveis=responsaveis,
                total_tasks=len(unique_group_tasks),
                completed_tasks=completed,
                in_progress_tasks=in_progress,
                late_tasks=late,
                blocked_tasks=blocked,
                on_time_deliveries=on_time,
                late_deliveries=late_deliv
            ))
        
        # Adicionar grupo "Sem Grupo" se houver tarefas sem grupo
        sem_grupo_tasks = [t for t in task_reports if not t.grupo]
        if sem_grupo_tasks:
            # Deduplicate sem grupo tasks by task_id to avoid counting the same task multiple times
            unique_sem_grupo_tasks_map = {}
            for task in sem_grupo_tasks:
                if task.task_id not in unique_sem_grupo_tasks_map:
                    unique_sem_grupo_tasks_map[task.task_id] = task
            unique_sem_grupo_tasks = list(unique_sem_grupo_tasks_map.values())
            
            completed = len([t for t in unique_sem_grupo_tasks if t.status == 'Conclu√≠da'])
            in_progress = len([t for t in unique_sem_grupo_tasks if t.status == 'Em Andamento'])
            late = len([t for t in unique_sem_grupo_tasks if t.status == 'Atrasada'])
            blocked = len([t for t in unique_sem_grupo_tasks if t.status == 'Bloqueada'])
            
            completed_with_due = [t for t in unique_sem_grupo_tasks if t.status == 'Conclu√≠da' and t.due_date != 'N√£o definida']
            on_time = len([t for t in completed_with_due if t.days_late == 0])
            late_deliv = len([t for t in completed_with_due if t.days_late > 0])
            
            logger.info(f"üìä Sem Grupo: {len(unique_sem_grupo_tasks)} tarefas √∫nicas ({completed} conclu√≠das, {in_progress} em andamento, {late} atrasadas)")
            
            group_summaries.append(GroupReportSummary(
                grupo='Sem Grupo',
                responsaveis=[],
                total_tasks=len(unique_sem_grupo_tasks),
                completed_tasks=completed,
                in_progress_tasks=in_progress,
                late_tasks=late,
                blocked_tasks=blocked,
                on_time_deliveries=on_time,
                late_deliveries=late_deliv
            ))
        
        logger.info('==============================')
        
        return ReportSummary(
            total_tasks=total_tasks,
            completed_tasks=completed_tasks,
            in_progress_tasks=in_progress_tasks,
            late_tasks=late_tasks,
            overdue_tasks=overdue_tasks,
            blocked_tasks=blocked_tasks,
            total_collaborators=total_collaborators,
            group_summaries=group_summaries
        )
    
    def generate_collaborator_reports(self, task_reports: List[TaskReport]) -> List[CollaboratorReport]:
        """
        Gera relat√≥rios individuais por colaborador evitando duplica√ß√µes.
        
        Args:
            task_reports: Lista de relat√≥rios de tarefas
            
        Returns:
            Lista de relat√≥rios de colaboradores
        """
        collaborator_map = {}
        
        logger.info('=== GERA√á√ÉO DE RELAT√ìRIOS DE COLABORADORES ===')
        logger.info(f'Total de task reports: {len(task_reports)}')
        
        # Agrupar tarefas por colaborador √∫nico (sem duplicar)
        for task in task_reports:
            collaborator = task.collaborator_name
            
            # Se √© um colaborador agregado (com v√≠rgulas), dividir e atribuir proporcionalmente
            if ',' in collaborator:
                nomes = [nome.strip() for nome in collaborator.split(',')]
                
                # Para colaboradores agrupados, criar uma entrada para cada um com a tarefa completa
                for nome in nomes:
                    if nome not in collaborator_map:
                        collaborator_map[nome] = []
                        
                    # Criar uma c√≥pia da task para cada colaborador individual
                    task_copy = TaskReport(
                        task_id=task.task_id,
                        collaborator_name=nome,
                        task_name=task.task_name,
                        list_name=task.list_name,
                        due_date=task.due_date,
                        created_at=task.created_at,
                        completed_at=task.completed_at,
                        status=task.status,
                        days_late=task.days_late,
                        observations=task.observations,
                        grupo=task.grupo,
                        etapa_atual=task.etapa_atual,
                        finalizada_para_flavia=task.finalizada_para_flavia,
                        feita=task.feita,
                        em_revisao=task.em_revisao
                    )
                    collaborator_map[nome].append(task_copy)
            else:
                # Colaborador individual
                if collaborator not in collaborator_map:
                    collaborator_map[collaborator] = []
                collaborator_map[collaborator].append(task)
        
        logger.info(f'Colaboradores √∫nicos identificados: {len(collaborator_map)}')
        
        # Gerar relat√≥rio para cada colaborador
        reports = []
        
        for collaborator_name, tasks in collaborator_map.items():
            # Deduplicate tasks by task name + group to avoid counting the same task multiple times
            unique_tasks_map = {}
            for task in tasks:
                key = f"{task.task_name}-{task.grupo or 'no-group'}"
                if key not in unique_tasks_map:
                    unique_tasks_map[key] = task
                    
            unique_tasks = list(unique_tasks_map.values())
            
            total_tasks = len(unique_tasks)
            completed_tasks = len([t for t in unique_tasks if t.status == 'Conclu√≠da'])
            in_progress_tasks = len([t for t in unique_tasks if t.status == 'Em Andamento'])
            late_tasks = len([t for t in unique_tasks if t.status == 'Atrasada'])
            blocked_tasks = len([t for t in unique_tasks if t.status == 'Bloqueada'])
            pending_tasks = total_tasks - completed_tasks
            
            # Taxa de conclus√£o em percentual (0-100)
            completion_rate = (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
            
            # M√©dia de atraso apenas para tarefas que est√£o realmente atrasadas (n√£o conclu√≠das)
            late_days = [t.days_late for t in unique_tasks if t.days_late > 0 and t.status in ['Atrasada', 'Em Andamento']]
            average_days_late = (sum(late_days) / len(late_days)) if late_days else 0
            
            logger.info(f"üë§ {collaborator_name}: {total_tasks} tarefas √∫nicas ({completed_tasks} conclu√≠das - {(completion_rate * 100):.1f}%)")
            
            # Ordenar tarefas por status (atrasadas primeiro, depois conclu√≠das, depois outras) e depois por nome
            sorted_tasks = sorted(unique_tasks, key=lambda t: (
                0 if t.status == 'Atrasada' else 1 if t.status == 'Conclu√≠da' else 2,
                t.task_name
            ))
            
            reports.append(CollaboratorReport(
                collaborator_name=collaborator_name,
                total_tasks=total_tasks,
                completed_tasks=completed_tasks,
                in_progress_tasks=in_progress_tasks,
                pending_tasks=pending_tasks,
                late_tasks=late_tasks,
                blocked_tasks=blocked_tasks,
                completion_rate=completion_rate,
                average_days_late=round(average_days_late),
                tasks=sorted_tasks
            ))
        
        # Ordenar por taxa de conclus√£o
        reports.sort(key=lambda r: r.completion_rate, reverse=True)
        
        logger.info('=== RELAT√ìRIOS DE COLABORADORES GERADOS ===')
        
        return reports
    
    def _format_due_date(self, due_date_str: Optional[str]) -> str:
        """Formata data de vencimento para exibi√ß√£o."""
        if not due_date_str:
            return 'N√£o definida'
            
        try:
            if due_date_str.endswith('Z'):
                due_date = datetime.fromisoformat(due_date_str.replace('Z', '+00:00'))
            else:
                due_date = datetime.fromisoformat(due_date_str)
                
            return due_date.strftime('%d/%m/%Y')
            
        except (ValueError, TypeError):
            return 'N√£o definida'
